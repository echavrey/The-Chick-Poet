
(require-extension srfi-13)

(define (lastL l) 
	(cond 
		( (null?(cdr l)) l )
		(#t (lastL(cdr l)))))

(define (reves l) 
	(cond 
		((null? l) '())
		(#t (print l) (append (reves(cdr l)) (cons (car l) '()) ))))

(define (rehacer l) 
	(cond 
		((null? l) '())
		(#t (print l) (cons (car l) (rehacer (cdr l))) )))

(define (sumatoria n)
	(cond ((eq? 0 n) 0)
		(#t (print n) (+ n (sumatoria (- n 1))))))

(define (find? l n) 
	(cond
		((null? l) #f)
		((eq? (car l) n) #t)
		(#t (find? (cdr l) n))
	)
)

(define (findeep? l n)
	(cond
		((null? l) #f)
		((eq? (car l) n) #t)
		((list? (car l)) (findeep? (car l) n))
		(#t (findeep? (cdr l) n))
	)
)

(define (findAndKill l n)
	(cond
		((null? l) '())
		((eq? (car l) n) (cdr l) )
		(#t  (cons(car l) (findAndKill (cdr l) n) ))
	)
)

(define (findAndKillAll l n)
	(cond 
		((null? l ) '())
		((eq? (car l) n) (findAndKillAll (cdr l) n))
		(#t (cons(car l) (findAndKillAll(cdr l) n)))
	)
)

(define (findAndKillAllDeep l n)
	(cond 
		((null? l) '())
		((eq? (car l) n) (findAndKillAllDeep(cdr l) n) )
		((list? (car l)) (cons (findAndKillAllDeep(car l) n) (findAndKillAllDeep(cdr l) n)) )
		(#t  (cons (car l) (findAndKillAllDeep(cdr l) n)))
	)
)

(define (flat l)
	(cond
		((null? l) '())
		((list? (car l))(append (flat(car l)) (flat(cdr l))))
		(#t (cons (car l) (flat (cdr l))))
	)
)

(define (flatP l)
	(cond
		((null? l) '())
		((list? (car l))(cons(conc(flatP(car l)) (flatP(cdr l))) '()))
		(#t (cons (conc (car l) (flatP (cdr l))) '() ))
	)
)

(define (concate var1 var2) 
	(cond
		(#t (string var1 var2) )
	)
)

(define (butLastL l)
	(cond 
		((null? (cdr l)) '())
		(#t (cons (car l) (butLastL (cdr l))))
	)
)


#| (define y '(
(preposicion ( * (a)))
(sustantivo ((a) *(b e) (j a)))
(sustantivo ((a) *(b o) (n o)))
(verbo ((a) *(c e) (c h a)))
(sustantivo ((a) (j e) *(d r e z)))
(adjetivo ((a) (j u s) *(t a) (d o)))
(sustantivo ((a) *(l a m) (b r e)))
(verbo ((a l) *(c a n) (z a)))
(sustantivo ((a l) *(t a r)))
(sustantivo ((a) (m a) (n e) *(c e r)))
(sustantivo ((a) *(m a n) (t e)))
(adjetivo ((a) (m a r) *(g a) (d o)))
(verbo ((a) *(m a) (r r a)))
(sustantivo ((a m) (b u) *(l a n) (c i a)))
(verbo ((a) (m e) *(n a) (z a)))
(verbo ((a) (m o n) *(t a r)))
(sustantivo ((a) *(m o r)))
(preposicion ( * (a n) (t e)))
(verbo ((a m) *(p u) (t a)))
(adjetivo ((a n) (c e s) *(t r a l)))
(verbo ((a) (p u) *(r a r)))
(sustantivo ((a r) *(p o n)))

( preposicion ( * (b a) (j o)))
( verbo ( ( b a ) *( t i r ) ) )
( verbo ( ( b a l ) *( b u ) ( c i r ) ) )
( sustantivo ( ( b a ) *( n a ) ( n o ) ) )
( adjetivo ( ( b a n ) *( d i ) ( d o ) ) )
( verbo ( ( b a ) ( r a ) *( j a r ) ) )
( adjetivo ( ( b a ) *( r a ) ( t o ) ) )
( sustantivo ( ( b a r ) ( c e ) *( l o ) ( n a ) ) )
( sustantivo ( ( b a ) ( s u ) *( r e ) ( r o ) ) )
( verbo ( ( b a u ) ( t i ) *( z a r ) ) )
( verbo ( ( b e ) *( b e r ) ) )
( adjetivo ( ( b e ) *( n i g ) ( n o ) ) )
( adverbio ( ( b e s ) *( t i ) ( a l ) ( m e n ) ( t e ) ) )
( verbo ( ( b i r ) *( l a r ) ) )
( verbo ( ( b l a n ) *( d i r ) ) )
( sustantivo ( ( b o ) *( l i n ) ( c h a ) ) )
( adjetivo ( ( b o n ) ( d a ) *( d o ) ( s o ) ) )
( adjetivo ( ( b o ) *( r r a ) ( c h o ) ) )
( verbo ( ( b o s ) ( t e ) *( z a r ) ) )
( adverbio ( ( b r e) ( v e ) *( m e n ) ( t e ) ) )
( adverbio ( (b r i) (l l a n) (t e) *(m e n) (t e)))
( adverbio ( *( b r u s ) ( c a ) ( m e n ) ( t e ) ) )

(sustantivo ( ( c a ) * ( b a )( l l o ) ) )
(verbo ( ( c a ) ( b a l ) * ( g a r ) ) )
(preposicion ( * (c a) (b e)))
(verbo ( ( c a ) ( m i ) * ( n a r ) ) )
(verbo ( ( c a n ) * ( t a r ) ) )
(verbo ( ( c a ) * ( p a r ) ) )
(sustantivo ( *( c a r ) ( l o s ) ) )
(adjetivo ( * ( c a ) ( r o ) ) )
(sustantivo ( * ( c a ) ( r r o ) ) )
(sustantivo ( * ( c a ) ( s a ) ) )
(adverbio ( * ( c a ) ( s i ) ) )
(verbo ( ( c e ) * ( l a r ) ) )
(adjetivo ( ( c e ) * ( l o ) ( s a ) ) )
(sustantivo ( ( c e ) * ( m e n ) ( t o ) ) )
(adverbio ( * ( c e r ) ( c a ) ) )
(sustantivo ( ( c h a ) * ( y o ) ( t e ) ) )
(verbo ( ( c o ) * ( g e r ) ) )
(preposicion ( * (c o n)))
(adjetivo ( ( c o n ) * ( t e n ) ( t a ) ) )
(preposicion ( * (c o n) (t r a)))
(adverbio ( * ( c o ) ( m o ) ) )
(verbo ( ( c o m ) ( p i ) * ( l a r ) ) )
(adjetivo ( ( c o n ) ( t a ) ( m i ) * ( n a ) ( d o ) ) )

(verbo ((d a) * (ñ a r)))
(sustantivo ( * (d a) (ñ o)))
(preposicion ( * (d e)))
(sustantivo ((d e) (c a) * (d e n) (c i a)))
(verbo ((d e) (c a) * (e r)))
(sustantivo ((d e) (f o r) (m i) * (d a d)))
(sustantivo ((d e i) * (d a d)))
(verbo ((d e) (l e i) * (t a r)))
(adjetivo ((d e) (m o) * (n í a) (c o)))
(verbo ((d e s) (m o n) * (t ar)))
(sustantivo ((d e) (p r e) (d a) * (d o r)))
(adjetivo ((d e) (p r e) * (s i) (v o)))
(preposicion ( * (d e s) (d e)))
(verbo ((d e) (s e n) (v a i) * (n a r)))
(verbo ((d e s) (t r i) * (p a r)))
(adjetivo ((d e s) (v e n) (t u) * (r a) (d o)))
(sustantivo ((d i s) * (p u) (t a)))
(verbo ((d i s) (t o r) (s i o) * (n a r)))
(sustantivo ( * (d o g) (m a)))
(sustantivo ((d o) * (l o r)))
(sustantivo ( * (d o r) (s o)))
(sustantivo ( * (d o) (s i s)))
(sustantivo ( * (d r o) (g a)))
(verbo ((d u) * (d a r)))
(sustantivo ( * (d u e) (l o)))
(preposicion ( (d u) * (r a n) (t e)))

( sustantivo ( ( e ) * ( f e c )( t o) ) )
( sustantivo ( *( e l ) ) )
( sustantivo ( ( e ) ( l e ) * ( f a n ) ( t e ) ) )
( verbo ( ( e ) ( l e ) * ( g i r ) ) )
( sustantivo ( * ( e ) ( l l a ) ) )
(preposicion ( * (e n)))
( adverbio ( (e n ) * ( c i ) ( m a ) ) )
( verbo ( ( e n ) ( f r e n ) * (t a n ) (d o ) ) )
( adverbio ( ( e n ) *( f r e n ) ( t e ) ) )
(preposicion ( * (e n) (t r e)))
( adjetivo ( * ( e ) ( p i ) ( c o ) ) )
( verbo ( ( e s ) ( c u ) * ( c h a n ) ( d o ) ) )
( adjetivo ( ( e s ) ( f o r ) * ( s a ) ( d o ) ) )
( adjetivo ( ( e s ) ( p a ) * ( c i o ) ( s o ) ) )
( verbo ( ( e s ) ( p e ) * ( r a n ) ( d o ) ) )
( sustantivo ( ( e s ) * ( t a ) ( d o ) ) )
( adjetivo ( ( e s ) ( t i ) ( l i ) *( z a ) ( d o ) ) )
( sustantivo ((e s) *(t r e) (l l a s)))
( adverbio ( ( e s ) ( t r u e n ) ( d o ) ( s a ) * ( m e n ) ( t e ) ) )
( verbo ( ( e ) * ( x i s ) ( t e ) ) )
( adjetivo ( ( e x ) * ( t e n ) ( s o ) ) )

( sustantivo ( ( f a ) ( b o r ) * ( d o n ) ) )
( verbo ( ( f a ) ( b r i ) * ( c a r ) ) )
( adjetivo ( * ( f a ) ( c i l ) ) )
( verbo ( ( f a c ) ( t u ) * ( r a r ) ) )
( adjetivo ( ( f a ) * ( c u n ) ( d o ) ) )
( sustantivo ( * ( f a i ) ( f a ) ) )
( sustantivo ( ( f a i ) * ( s a n ) ) )
( adjetivo ( ( f a l ) * ( d u ) ( d o ) ) )
( verbo ( ( f a ) * ( l l a r ) ) )
( verbo ( * ( f a l ) ( t a r ) ) )
( sustantivo ( * ( f a z ) ) )
( adjetivo ( * ( f e ) ( l i z ) ) )
( verbo ( ( f e r ) * ( m e n ) ( t a r ) ) )
( adjetivo ( * ( f e r ) ( t i l ) ) )
( sustantivo ( * ( f e ) ( r u ) ( l a ) ) )
( verbo ( ( f e s ) * ( t e ) (j a r) ) )
( sustantivo ( * ( f i ) ( g u ) ( r a ) ) )
( adjetivo ( * ( f i ) ( n o ) ) )
( sustantivo ( * ( f r u ) ( t a ) ) )
( adjetivo ( * ( f u e r ) ( t e ) ) )

(sustantivo ( ( g a ) ( b a r ) * ( d i ) ( n a ) ) )
(adjetivo ( ( g a ) ( l a n ) ( t e ) * ( m e n ) ( t e ) ) )
(verbo ( ( g a ) ( l a r ) * ( d o ) ( n a ) ) )
(sustantivo ( ( g a ) ( r r a ) * ( p a ) ( t a ) ) )
(sustantivo ( ( g a s ) ( t r o i n ) ( t e s ) ( t i ) * ( n a l ) ) )
(verbo ( ( g e ) * ( m i r ) ) )
(adjetivo ( ( g e ) ( n e ) ( r a ) ( l i ) ( z a ) * ( d o ) ( r a ) ) )
(adjetivo ( ( g e ) * ( n i a l ) ) )
(verbo ( ( g e s ) ( t i ) * ( c u ) ( l a ) ) )
(verbo ( * ( g i ) ( r a ) ) )
(verbo ( ( g l o ) ( r i ) * ( f i ) ( c a ) ) )
(adjetivo ( * ( g o r ) ( d o ) ) )
(verbo ( * ( g o ) ( z a ) ) )
(adjetivo ( ( g r a ) ( m a ) ( t i ) ( c a l ) * ( m e n ) ( t e ) ) )
(adjetivo ( ( g r a n ) * ( d i o ) ( s o ) ) )
(adjetivo (* ( g u a ) ( p o ) ) )
(sustantivo ( ( g u a r ) ( d a ) * ( c o s ) ( t a s ) ) )
(sustantivo ( ( g u a r ) ( n i ) * ( c i o n ) ) )
(sustantivo ( ( g u i ) ( l l o ) * ( t i ) ( n a ) ) )
(sustantivo ( ( g u i ) * ( t a ) ( r r a ) ) )

(preposicion ( * (h a) (c i a)))
(sustantivo ( ( h a r ) ( m o ) * ( n i ) ( a ) ) )
(preposicion ( * (h a s) (t a )))
(sustantivo ( ( h a ) * ( z a ) ( ñ a ) ) )
(sustantivo ( * (h e ) ( l i ) ( c e ) ) )
(sustantivo ( * ( h e m ) ( b r a ) ) )
(sustantivo ( ( h e ) * ( r e ) ( j e ) ) )
(sustantivo ( ( h e r ) * ( m a ) ( n o ) ) )
(sustantivo ( * ( h e ) ( r o ) ( e ) ) )
(sustantivo ( * ( h i e ) ( l o ) ) )
(sustantivo ( * ( h i ) ( j o ) ) )
(sustantivo ( * ( h i e ) ( n a ) ) )
(sustantivo ( * ( h i e ) ( r r o ) ) )
(sustantivo ( * ( h i ) ( g a ) ( d o ) ) )
(adjetivo ( ( h e r ) * ( m e ) ( t i ) ( c o ) ) )
(adjetivo ( ( h a ) ( b i ) ( l i ) * ( d o ) ( s o ) ) )
(adjetivo ( ( h a ) ( b l a ) * ( d o r ) ) )
(adjetivo ( ( h o ) * ( n e s ) ( t o ) ) )
(adjetivo ( ( h i ) * ( p o ) ( c r i ) ( t a ) ) )
(verbo ( ( h e r ) * ( v i r ) ) )
(verbo ( ( h a ) * ( c e r ) ) )
(verbo ( ( h a ) * ( l l a r ) ) )
(verbo ( ( h a ) * ( b l a r ) ) )
(verbo ( ( h a ) ( l a ) * ( g a r ) ) )

(sustantivo ((i) *(g l e) (s i a)))
(sustantivo ((i) *(g l u)))
(adjetivo ((i g) (n o) *(r a n) (t e)))
(sustantivo ((i) *(m a) (g e n)))
(verbo ((i)(m a) (g i) *(n a r)))
(adjetivo ((i m) (p e r) *(f e c) (t o)))
(verbo ((i m) (p r e) (s i o) *(n a r)))
(adjetivo ((i n) (c o) (h e) *(r e n) (t e)))
(adjetivo ((i n) *(c o) (m o) (d o)))
(verbo ((i n) (c l u) *(i r)))
(adjetivo ((i n) (c r e) *(i) (b l e)))
(verbo ((i n) (d a) *(g a r)))
(sustantivo (*(i n) (d i o)))
(adjetivo ((i n) *(g e) (n u o)))
(verbo ((i n s) (t r u) *(i r)))
(adjetivo ((i n) (t e) (l i) *(g e n) (t e)))
(adjetivo ((i n) (t e) (r e) *(s a n) (t e)))
(verbo ((i n) (v e s) (t i) *(g a r)))
(verbo (*(i r)))
(sustantivo (*(i s) (l a)))

(sustantivo((j a)(b a) * (l i)))
(sustantivo((j a) * (b o n)))
(sustantivo((j a) * (g u a r)))
(verbo((j a) * (l a r)))
(sustantivo((j a) * (m a i)(c a)))
(adjetivo((j a) * (m a s)))
(sustantivo((j a) * (m o n)))
(sustantivo((j a) * (p o n)))
(sustantivo((j a) * (q u e)(c a)))
(sustantivo((j a r) * (d i n)))
(verbo((j u n) * (t a r)))
(verbo((j o) * (d e r)))
(verbo((j u)(b i) * (l a r)))
(adjetivo((j u)(g u e) * (t o n)))
(adjetivo((j u) * (g o)(s o)))
(adjetivo( * (j u n)(t o)))
(adverbio((j u)(v e) * (n i l)(m e n)(t e)))
(adverbio((j u) * (g o)(s a)(m e n)(t e)))
(verbo((j u) * (g a r)))
(verbo((j u) * (r a r)))

(articulo (*(l a)))
(sustantivo (*(l a n) (z a)))
(sustantivo (*(l a) (p a)))
(adjetivo (*(l a r) (g o)))
(articulo (*(l a s)))
(verbo ((l a) *(t i r)))
(adjetivo ((l e) *(g a l)))
(verbo ((l e) (g i) (t i) *(m a r)))
(adverbio (*(l e) (j o s)))
(adverbio ((l e n) (t a) *(m e n) (t e)))
(sustantivo ((l e) *(o n)))
(verbo ((l i) *(j a r)))
(adjetivo ((l i) *(m i) (t r o) (f e)))
(adjetivo (*(l i m) (p i o)))
(articulo (*(l o)))
(sustantivo (*(l o) (b o)))
(sustantivo (*(l o) (c o)))
(articulo (*(l o s)))
(sustantivo (*(l o) (z a)))
(sustantivo ((l u) *(c e) (r o)))
(verbo ((l u) *(c h a r)))
(sustantivo ((l u) *(c i e r) (n a) (g a)))
(adverbio (*(l u e) (g o)))
(adjetivo (*(l u) (g u) (b r e)))
(sustantivo (*(l u) (n a)))
(sustantivo (*(l u s) (t r e)))
(sustantivo (*(l u z)))

(sustantivo ( ( m a ) *( c e ) ( t a )))
(verbo ( ( m a l ) ( d e ) *(c i r )))
(verbo ( ( m a ) *( d r u ) ( g u e )))
(adjetivo ( ( m a ) *( d u ) ( r o )))
(verbo ( *( m a n ) ( d e )))
(verbo ( ( m a ) *( n e ) ( j o )))
(verbo ( ( m a ) ( n i ) ( p u ) *( l a r )))
(sustantivo ( *( m a ) ( n o )))
(verbo ( ( m a ) *( t a r )))
(verbo ( ( m a s ) ( t i ) *( c a r )))
(adjetivo ( ( m a ) ( l i ) *( c i o ) ( s o )))
(adjetivo ( *( m a ) ( l o )))
(adjetivo ( ( m a ) *( y o r )))
(adverbio ( *( m e ) ( n o s )))
(sustantivo ( *( m e ) ( s a )))
(adjetivo ( *( m i )))
(adjetivo ( ( m o ) *( d e s ) ( t o )))
(verbo ( *( m o n ) ( t e )))
(adverbio ( *( m u ) ( c h o )))
(adverbio ( *( m u y )))

(sustantivo ( (n a) * (r a n) (j a) ) )
(sustantivo ( (n a) * (v a) (j a) ) )
(verbo ( (n a) (v e) * (g a r) ) )
(verbo ( (n e) (c e) (s i) * (t a r) ) )
(verbo ( (n e) * (g a r) ) )
(verbo ( (n e) (g o) * (c i a r) ) )
(adjetivo ( * (n e) (g r o) ) )
(adjetivo ( (n e p) * (t u) (n o) ) )
(sustantivo ( (n e u) * (m a) (t i) (c o) ) )
(sustantivo ( * (n i) (d o) ) )
(sustantivo ( * (n i e) (t a) ) )
(sustantivo ( * (n i e) (v e) ) )
(verbo ( (n i) (v e) * (l a r) ) )
(verbo ( (n o) (q u e) * (a r) ) )
(verbo ( (n o) * (t a r) ) )
(verbo ( (n o) (t i) (f i) * (c a r) ) )
(sustantivo ( * (n o) (v i a) ) )
(sustantivo ( * (n u e z) ) )
(verbo ( (n u) (m e) * (r a r) ) )
(verbo ( (n u) * (t r i r) ) )

(verbo ((o b) (j e) *(t a r)))
(verbo ((o) (b l i) *(g a r)))
(verbo ((o b) (s e r) *(v a r)))
(adjetivo ( *(o b) (v i o)))
(sustantivo ((o) *(c a) (s o)))
(sustantivo ((o) *(c e) (a) (n o)))
(sustantivo ((o c) *(t u) (b r e)))
(verbo ((o) ( c u l ) *(t a r)))
(adjetivo ((o) *(c u l) (t o)))
(adjetivo ((o) (c u) *(p a) (d o)))
(sustantivo ((o) *(f r e n) (d a)))
(sustantivo ( *(o) (j o)))
(adjetivo ((o l) (v i) *(d a) (d o)))
(verbo ((o l) (v i) *(d a r)))
(verbo ((o) (p i) *(n a r)))
(adjetivo ((o r) (d i) *(n a) (r i o)))
(sustantivo ((o r) *(g u) (l l o)))
(adjetivo ((o) *(s a) (d o)))
(adjetivo ((o s) *(c u) (r o)))
(verbo ((o) (t o r) *(g a r)))
(sustantivo ((o ) *(v e) (j a)))

(sustantivo ((p a l) *(m e) (r a)))
(sustantivo ((p a) *(l o) (m a r)))
(verbo ((p a l) *(p i) (t a)))
(preposicion ( * (p a) (r a)))
(adjetivo ((p a) *(r e) (j o)))
(verbo ((p a r) *(t i e n) (d o)))
(sustantivo (*(p e) (c h o)))
(verbo ((p e) (l i) *(g r a r)))
(adjetivo ((p e) *(q u e) (ñ o)))
(sustantivo ((p e) (s a) *(d i) (l l a)))
(verbo ((p i n) *(t a) (m o s)))
(sustantivo ((p i) *(r o) (p o)))
(sustantivo (*(p l a) (y a)))
(sustantivo (*(p l u) (m a)))
(verbo ((p o) *(d e r)))
(preposicion ( * (p o r)))
(adjetivo ((p r e) *(c i o) (s o)))
(verbo ((p r e) *(d i) (c a)))
(verbo ((p r e) *(f i e) (r e)))
(adjetivo ((p r i) *(m e r)))
(sustantivo ((p r o) *(f e) (t a)))
(sustantivo ((p u) *(r e) (z a)))

(adjetivo ((q u e) * (b r a) (d o)))
(verbo ((q u e) * (b r a r)))
(sustantivo ( *(q u e) (s o)))
(sustantivo ((q u e) * (b r a n) (t o)))
(verbo ((q u e) * (m a r)))
(adjetivo ((q u e) (j u m) * (b r o) (s o)))
(sustantivo ( * (q u e) (j a)))
(sustantivo ((q u e) (r u) *(b i n)))
(sustantivo ((q u e) * (s a) (d a)))
(sustantivo ((q u e t) * (z a l)))
(adjetivo  (*(q u i e) (t o)))
(sustantivo ((q u i) * (j o n) (g o)))
(sustantivo ((q u i) * (j o) (t e)))
(sustantivo ((q u i) * (m e) (r a)))
(sustantivo ((q u i n) (c e) (a) * (ñ e) (r o)))
(sustantivo ((q u i n) * (t a) (n a)))
(sustantivo ((q u i) (q u i) (r i) *(q u i)))
(sustantivo (*(q u i o s) (c o)))
(verbo ((q u i) * (t a r)))
(sustantivo ((q u i) * (t o)))

(sustantivo ((r a) *( c i s )(m o)))
(sustantivo ( *(r a) (n a)))
(advervio ( *(r a) (p i) (d a) (m e n) (t e)))
(sustantivo ( *(r a) (t a)))
(sustantivo (*(r a) (y o)))
(verbo ((r e) (c i) *(c l a) (b a)))
(advervio ((r e) *(c i e n)))
(verbo ((r e) (d u) *(c i) (m o s)))
(verbo ((r e) *(i) (a)))
(verbo ((r e) (f e) *(r i) (m o s)))
(sustantivo ( *(r i) (f l e)))
(verbo ((r e) *(l l e) (n a n)))
(sustantivo ((r e) (m o) *(l a) (c h a)))
(verbo ((r e) (p r o) (d u) *(c i) (a n)))
(verbo ((r e) (s o l) *(v i) (a) (m o s)))
(verbo ((r e s) (p i) *(r a i s)))
(verbo ((r e) *(t r a) (s a n)))
(verbo ((r e) *(v e) (l a)))
(adjetivo ( *(r u) (b i o)))
(sustantivo ( *(r u e) (d a)))

(sustantivo ( * (s a) (b a) (d o)))
(verbo ((s a) * (b e r)))
(adjetivo ( * (s a) (b i o)))
(verbo ((s a) (c u) * (d i r)))
(sustantivo ( * (s a) (l i) (v a)))
(verbo ((s a) (l u) * (d a r)))
(adjetivo ((s a) (t u) * (r a) (d o)))
(sustantivo ( * (s e) (d a)))
(preposicion ((s e) * (g u n)))
(sustantivo ((s e) * (m i o) (t i) (c a)))
(adjetivo ((s e n) * (s u a l)))
(sustantivo ( * (s h v i d) (c h e n) (c o)))
(verbo ((s i l) * (b a r)))
(sustantivo ( * (s i l) (v i a)))
(preposicion ( * (s i n)))
(sustantivo ((s i s) * (t e) (m a)))
(preposicion ( * (s o)))
(adjetivo ((s o) * (b e r) (b i o)))
(preposicion ( * (s o) (b r e)))
(sustantivo ((s u l) * (t a n)))
(adjetivo ((s u) (p e) * (r i o r)))
(verbo ((s u) (p o) * (n e r)))
(verbo ((s u s) (t i) * (t u i r)))
(sustantivo ((s u s) (t i) * (t u) (t o)))

(sustantivo ( (t i) *(t a) (n i o) ) )
(sustantivo ( *(t o) (p o) ) )
(sustantivo ( *(t o) (r o) ) )
(verbo ( (t o r) *(c e r) ) )
(verbo ( (t e) *(c l e) (a r) ) )
(adjetivo ( *(t o) (x i) (c o) ) )
(adjetivo ( (t e) (n e) *(b r o) (s o) ) )
(adjetivo ( (t r a) *(b a) (d o) ) )
(adjetivo ( *(t o n) (t o) ) )
(verbo ( (t r a) (b a) *(j a r) ) )
(verbo ( (t r a) *(g a r) ) )
(preposicion ( * (t r a s)))
(verbo ( (t a) (b u) *(l a r) ) )
(verbo ( (t a) (l a) *(d r a r) ) )
(adjetivo ( *(t r i s) (t e) ) )
(sustantivo ( (t e m) (p e) (r a) *(t u) (r a) ) )
(sustantivo ( (t a) *(b l e) (r o) ) )
(verbo ( (t r e) *(p a r) ) )
(adjetivo ( (t r a n s) (p a) *(r e n) (t e) ) )
(verbo ( (t o r) (t u) *(r a r) ) )
(adjetivo ( (t r a n) *(q u i) (l a) ) )

(adjetivo ((u) (b e) * (t e n) (s e)))
(verbo ((u) (b i) * (c a r)))
(sustantivo ( * (u l) (c e) (r a)))
(verbo ((u l) (t r a) * (j a r)))
(adverbio (*(u l) (t i) (m o)))
(adjetivo ((u m) * (b r o) (s o)))
(artículo (* (u n)))
(artículo (* (u) (n a)))
(abjetivo ((u n) * (d e) (c i) (m o)))
(sustantivo ((u n) * (g u e n) (t o)))
(sustantivo ((u) (n i) * (c o r) (n i o)))
(verbo ((u) (n i) * (f i) (c a r)))
(verbo ((u) (n i) (f o r) * (m a r)))
(adverbio ((u) (n i) (f o r) (m e) * (m e n) (t e)))
(verbo ((u) * (n i r)))
(artículo ( *(u) (n o s)))
(sustantivo ((u s) * (t e d)))
(verbo ((u) (s u r) * (p a r)))
(verbo ((u) (t i) (l i) * (z a r)))
(sustantivo ( * (u) (v a)))

(verbo ( (v a) (g a) (b u n) * (d e a)))
(adjetivo ( * (v a) (g o)))
(sustantivo ( (v a) * (s a) (l l o)))
(adjetivo ( * (v a s) (t o)))
(sustantivo ( (v e) * (c i) (n o)))
(adjetivo ( (v e) * (g a) (n o)))
(verbo ( (v e) (g e) * (t a n) (d o)))
(sustantivo ( * (v e) (l l o)))
(verbo ( (v e n) * (d i o)))
(adjetivo ( (v e) (n e) * (n o) (s o)))
(verbo ( (v e n) (t i) * (l a) (b a)))
(adjetivo ( (v e r) (g o n) * (z o) (s o)))
(preposicion ( * (v e r) (s u s)))
(verbo ( (v e s) * (t i a)))
(preposicion ( * (v i) (a)))
(sustantivo ( (v i) * (c a) (r i o)))
(adjetivo ( (v i) * (c i o) (s o)))
(sustantivo ( (v i c) * (t o) (r i a)))
(sustantivo ( * (v i e n) (t r e)))
(verbo ( (v i) (g i) * (l a) (b a)))
(sustantivo ( * (v i) (l l a)))
(adjetivo ( (v i) * (l l e) (r o)))
(sustantivo ( * (v i n) (c u) (l o)))
(adjetivo ( (v i o) * (l e n) (t o)))
(sustantivo ( * (v i s) (c e) (r a)))
(adverbio ( (v i) (s i) (b l e) * (m e n) (t e)))
(sustantivo ( (v i) * (s i) (t a)))
(adjetivo ( (v i s) * (t o) (s o)))
(adjetivo ( (v o) (l u) (m i) * (n o) (s o)))	
)
) |#







(define x '(
(preposicion ( * (a)))
(sustantivo ((a) *(b e) (j a s)))
(verbo ((a) *(c e) (c h a n)))
(adjetivo ((a) (d o) (l o) * (r i) (d a s)))
(adjetivo ((a) (j u s) *(t a) (d a s)))
(verbo ((a l) *(c a n) (z a n)))
(sustantivo ((a) *(m a n) (t e s)))
(adjetivo ((a) (m a r) *(g a) (d a s)))
(verbo ((a) (m a) *(r r a) (r o n)))
(sustantivo ((a m) (b u) *(l a n) (c i a s)))
(verbo ((a) (m e) *(n a) (z a) (d a s)))
(verbo ((a) (t a) *(c a) (r o n)))
(preposicion ( * (a n) (t e)))
(verbo ((a m) (p u) *(t a) (r o n)))
(adjetivo ((a n) (c e s) *(t r a) (l e s)))
(sustantivo ( *(a r) (m a s)))
(verbo ((a) (p u) *(r a) (d a s)))

( preposicion ( * (b a) (j o)))
( verbo ( ( b a ) *( t i ) (d a s) ) )
( verbo ( ( b a l ) ( b u ) *( c e ) (a n) ) )
( sustantivo ( ( b a ) *( n a ) ( n a s ) ) )
( adjetivo ( ( b a n ) *( d i ) ( d a s ) ) )
( verbo ( ( b a ) ( r a ) *( j a ) (d a s) ) )
( adjetivo ( ( b a ) *( r a ) ( t a s ) ) )
( sustantivo ((b a) *(t a) (l l a s)))
( verbo ( ( b a u ) ( t i ) *( z a ) (d a s) ) )
( verbo ( ( b e ) *( b i e ) (r o n) ) )
( adjetivo ( ( b e ) *( n i g ) ( n a s ) ) )
( adverbio ( ( b e s ) *( t i ) ( a l ) ( m e n ) ( t e ) ) )
( verbo ( ( b r i ) *(l l a) (r o n) ) )
( verbo ( ( b l a n ) *( d i e)  (r o n ) ) )
( sustantivo ( ( b o ) *( l i n ) ( c h a s) ) )
( adjetivo ( ( b o n ) ( d a ) *( d o ) ( s a s) ) )
( adjetivo ( ( b o ) *( r r a ) ( c h a s ) ) )
( verbo ( ( b o s ) ( t e ) *( z a ) (b a n) ) )
( adverbio ( ( b r e) ( v e ) * ( m e n ) ( t e ) ) )
( adjetivo ((b r i) *(l l a n) (t e s)))
( adverbio ( ( b r i) ( l l a n ) (t e) * ( m e n ) ( t e ) ) )
( adverbio ( ( b r u s ) ( c a ) * ( m e n ) ( t e ) ) )

(verbo ( ( c a ) ( b a l ) * ( g a ) (r o n) ) )
(verbo ( ( c a ) ( m i ) * ( n a ) (r o n) ) )
(sustantivo ((c a n) * (c i o) (n e s)))
(verbo ( ( c a n ) * ( t a ) (r o n) ) )
(verbo ( ( c a ) * ( p a ) (r o n) ) ) 
(adjetivo ( * ( c a ) ( r a s ) ) )
(sustantivo (( c a ) * ( r r o ) (z a s) ) )
(sustantivo ( * ( c a ) ( s a s) ) )
(adverbio ( * ( c a ) ( s i ) ) )
(verbo ( ( c e ) * ( l a ) (r o n) ) )
(adjetivo ((c e) (l e s) *(t i a) (l e s)))
(adjetivo ( ( c e ) * ( l o ) ( s a s) ) )
(adverbio ( * ( c e r ) ( c a ) ) )
(verbo ( ( c o ) * ( g i e) (r o n) ) )
(verbo ( ( c o m ) ( p i ) * ( l a ) (r o n) ) )
(preposicion ( * (c o n)))
(adjetivo ( ( c o n ) * ( t e n ) ( t a s) ) )
(preposicion ( * (c o n) (t r a)))
(adverbio ( * ( c o ) ( m o ) ) )
(adjetivo ( ( c o n ) ( t a ) ( m i ) * ( n a ) ( d a s ) ) )
(adjetivo ( ( c o) ( r r o m ) * ( p i ) ( d a s ) ) )

(verbo ((d a) * (ñ a) (r o n)))
(sustantivo ( * (d a n) (z a s)))
(preposicion ( * (d e)))
(sustantivo ((d e) (c a) * (d e n) (c i a s)))
(verbo ((d e) (c a) * (i) (d a s)))
(sustantivo ((d e) (f o r) (m i) * (d a) (d e s)))
(sustantivo ((d e i) * (d a) (d e s)))
(verbo ((d e) (l e i) * (t a) (r o n)))
(adjetivo ((d e) (m o) * (n i)  (a) (c a s)))
(verbo ((d e s) (m o n) * (t a) (d a s)))
(sustantivo ((d e) (p r e) (d a) * (d o) (r a s)))
(adjetivo ((d e) (p r e) * (s i) (v a s)))
(preposicion ( * (d e s) (d e)))
(adjetivo ((d e) *(s o) (l a) (d a)))
(verbo ((d e) (s e n) (v a i) * (n a) (r o n)))
(verbo ((d e s) (t r i) * (p a) (r o n)))
(adjetivo ((d e s) (v e n) (t u) * (r a) (d a s)))
(sustantivo ((d i s) * (p u) (t a s)))
(verbo ((d i s) (t o r) (s i o) * (n a) (d a s)))
(sustantivo ((d o n) * (c e) (l l a s)))
(sustantivo ( * (d o) (s i s)))
(sustantivo ( * (d r o) (g a s)))
(verbo ((d u) * (d i e) (r o n)))
(preposicion ( (d u) * (r a n) (t e)))

( verbo ( ( e ) ( l i ) * ( g i e ) (r o n) ) )
(preposicion ( * (e n)))
( adverbio ( (e n ) * ( c i ) ( m a ) ) )
( verbo ( ( e n ) ( f r e n ) * (t a ) (r o n ) ) )
( adverbio ( ( e n ) *( f r e n ) ( t e ) ) )
(preposicion ( * (e n) (t r e)))
( adjetivo ( * ( e ) ( p i ) ( c a s ) ) )
( verbo ( ( e s ) ( c u ) * ( c h a ) ( r o n ) ) )
( adjetivo ( ( e s ) ( f o r ) * ( z a ) ( r o n ) ) )
( adjetivo ( ( e s ) ( p a ) * ( c i o ) ( s a s) ) )
( verbo ( ( e s ) ( p e ) * ( r a n ) ( d o ) ) )
( adjetivo ( ( e s ) ( t i ) ( l i ) *( z a ) ( d a s ) ) )
( sustantivo ((e s) *(t r e) (l l a s)))
( adverbio ( ( e s ) ( t r u e n ) ( d o ) ( s a ) * ( m e n ) ( t e ) ) )
( verbo ( ( e ) ( x i s ) * ( t i e ) (r o n) ) )
( adjetivo ( ( e x ) * ( t e n ) ( s a s ) ) )

( verbo ( ( f a ) ( b r i ) * ( c a ) (r o n) ) )
( adjetivo ( * ( f a ) ( c i) (l e s) ) )
( verbo ( ( f a c ) ( t u ) * ( r a ) (r o n) ) )
( adjetivo ( ( f e ) * ( l i ) ( c e s ) ) )
( sustantivo ( ( f a ) (c i) (l i) * (d a) ( d e s ) ) )
( sustantivo ( ( f a r ) * ( s a n ) (t e s) ) )
( verbo ( ( f a ) * ( l l a) ( r o n ) ) )
( verbo ( ( f a l ) * ( t a) (r o n) ) )
( sustantivo ( * ( f a r ) (s a s) ) )
( adjetivo ( ( f o r ) (m i) * (d a) (b l e s) ) )
( verbo ( ( f e r ) * ( m e n ) ( t a) (r o n ) ) )
( adjetivo ( * ( f e r ) ( t i)  (l e s ) ) )
( sustantivo ( * ( f e ) ( r u ) ( l a s) ) )
( verbo ( ( f e s ) ( t e ) * (j a) (r o n)) ) 
( sustantivo ( * ( f i ) ( g u ) ( r a s) ) )
( adjetivo ( * ( f i ) ( n a s ) ) )
( sustantivo ( * ( f r u ) ( t a s) ) )
( adjetivo ((f u) *(g a) (c e s)))
( adjetivo ( * ( f u e r ) ( t e s) ) )

(sustantivo ( ( g a ) ( b a r ) * ( d i ) ( n a s) ) )
(adjetivo ( ( g a ) ( l a n ) ( t e ) * ( m e n ) ( t e ) ) )
(verbo ( ( g a ) ( l a r ) ( d o ) * ( n a ) (r o n) ) )
(sustantivo ( ( g a ) ( r r a ) * ( p a ) ( t a s) ) )
(adjetivo ( ( g a s ) ( t r o i n ) ( t e s ) ( t i ) * ( n a ) ( l e s) ) )
(verbo ( ( g i ) * ( m i e ) (r o n) ) )
(adjetivo ( ( g e ) ( n e ) ( r a ) ( l i ) ( z a ) * ( d o ) ( r a s) ) )
(adjetivo ( ( g e ) * ( n i a ) (l e s) ) )
(verbo ( ( g e s ) ( t i ) ( c u ) * ( l a ) (r o n) ) )
(verbo ( ( g i ) * ( r a ) (r o n) ) )
(verbo ( ( g l o ) ( r i ) ( f i ) * ( c a ) (r o n) ) )
(adjetivo ( * ( g o r ) ( d a s ) ) )
(verbo ( ( g o ) * ( z a ) (r o n)) )
(adverbio ( ( g r a ) ( m a ) ( t i ) ( c a l ) * ( m e n ) ( t e ) ) )
(adjetivo ( ( g r a n ) * ( d i o ) ( s a s ) ) )
(adjetivo (* ( g u a ) ( p a s ) ) )
(sustantivo ( ( g u a r ) ( d a ) * ( c o s ) ( t a s ) ) )
(sustantivo ( ( g u a r ) ( n i ) * ( c i o ) ( n e s ) ) )
(sustantivo ( ( g u i ) ( l l o ) * ( t i ) ( n a s) ) )
(sustantivo ( ( g u i ) * ( t a ) ( r r a s) ) )

(preposicion ( * (h a) (c i a)))
(sustantivo ((h a) *(l a) (g o s)))
(sustantivo ( ( h a r ) ( m o ) * ( n i ) ( a s) ) )
(preposicion ( * (h a s) (t a )))
(sustantivo ( ( h a ) * ( z a ) ( ñ a s) ) )
(sustantivo ( * (h e ) ( l i ) ( c e s) ) )
(sustantivo ( * ( h e m ) ( b r a s) ) )
(sustantivo ( ( h e ) * ( r e ) ( j e s) ) )
(sustantivo ( ( h e r ) * ( m a ) ( n a s ) ) )
(sustantivo ( ( h e ) ( r o ) * ( i ) (n a s) ) )
(adjetivo ( ( h e) * ( l a ) (d a s) ) )
(sustantivo ( * ( h i ) ( j a s ) ) )
(sustantivo ( * ( h i e ) ( n a s) ) )
(adjetivo ( ( h e r ) * ( m e ) ( t i ) ( c a s ) ) )
(adjetivo ( ( h a ) ( b i ) ( l i ) * ( d o ) ( s a s ) ) )
(adjetivo ( ( h a ) ( b l a ) * ( d o) (r a s) ) )
(adjetivo ( ( h o ) * ( n e s ) ( t a s ) ) )
(adjetivo ( ( h i ) * ( p o ) ( c r i ) ( t a s) ) )
(verbo ( ( h e r ) * ( v i e) (r o n) ) )
(verbo ( ( h i ) * ( c i e ) (r o n) ) )
(verbo ( ( h a ) * ( l l a) (r o n) ) )
(verbo ( ( h a ) * ( b l a) (r  o n) ) )
(verbo ( ( h a ) ( l a ) * ( g a) (r o n) ) )

(adjetivo ((i n) (c r e) *(i) (b l e s)))
(adjetivo ((i g) (n o) *(r a n) (t e s)))
(sustantivo ((i) *(m a) (g e) (n e s)))
(verbo ((i)(m a) (g i) *(n a) (r o n)))
(adjetivo ((i m) (p e r) *(f e c) (t a s)))
(verbo ((i m) (p r e) (s i o) *(n a) (d a s)))
(adjetivo ((i m) (p r e) (s i o) *(n a n) (t e s)))
(adjetivo ((i n) (c o) (h e) *(r e n) (t e s)))
(adjetivo ((i n) *(c o) (m o) (d a s)))
(verbo ((i n) (c l u) *(y e) (r o n)))
(verbo ((i n) (d a) *(g a) (r o n)))
(sustantivo (*(i n) (d i a s)))
(adjetivo ((i n) *(g e) (n u a s)))
(verbo ((i n s) (t r u) *(y e) ( r o n)))
(adjetivo ((i n) (t e) (l i) *(g e n) (t e s)))
(adjetivo ((i m) (p r e) (s i o) *(n a n) (t e s)))
(verbo ((i n) (v e s) (t i) *(g a) (r o n)))
(verbo (*(f u e) (r o n)))
(sustantivo (*(i s) (l a s)))

(sustantivo((j a)(b a) * (l i) (e s)))
(sustantivo((j a) * (g u a) (r e s)))
(verbo((j a) * (l a) (r o n)))
(adverbio((j a) * (m a s)))
(sustantivo((j a) * (q u e)(c a s)))
(sustantivo((j a r) * (d i n)))
(verbo((j u n) * (t a) ( r o n)))
(verbo((j o) * (d i e) (r o n)))
(verbo((j u)(b i) * (l a) (r o n)))
(adjetivo((j u)(g u e) * (t o) (n a s)))
(adjetivo((j u) * (g o)(s a s)))
(adjetivo( * (j u n)(t a s)))
(adverbio((j u)(v e) * (n i l)(m e n)(t e)))
(adverbio((j u) * (g o)(s a)(m e n)(t e)))
(verbo((j u) * (g a) (r o n)))
(verbo((j u) * (r a) (r o n)))
(sustantivo((j u) (r a) (m e n) (t a) *(c i o) (n e s)))

(articulo (*(l a s)))
(sustantivo (*(l a n) (z a s)))
(sustantivo (*(l a) (p i) (d a s)))
(adjetivo (*(l a r) (g a s)))
(verbo ((l a) *(t i e) (r o n)))
(adjetivo ((l e) *(g a) (l e s)))
(verbo ((l e) (g i) (t i) *(m a) (r o n)))
(adverbio (*(l e) (j o s)))
(adverbio ((l e n) (t a) *(m e n) (t e)))
(sustantivo ((l e) *(o) (n a s)))
(verbo ((l i) *(j a) (r o n)))
(adjetivo ((l i) *(m i) (t r o) (f e s)))
(adjetivo (*(l i m) (p i a s)))
(sustantivo (*(l o) (b a s)))
(sustantivo (*(l o) (c a s)))
(sustantivo (*(l o) (z a s)))
(sustantivo ((l u) *(c e s)))
(verbo ((l u) *(c h a) (r o n)))
(sustantivo ((l u) *(c i e r) (n a) (g a s)))
(adverbio (*(l u e) (g o)))
(adjetivo (*(l u) (g u) (b r e s)))
(sustantivo (*(l u) (n a s)))
(sustantivo (*(l u s) (t r e s)))
(sustantivo (*(l u) (c e s)))

(sustantivo ( ( m a ) *( c e ) ( t a s)))
(verbo ( ( m a l ) ( d i ) *(j e) (r o n )))
(verbo ( ( m a ) *( d r u ) ( g a ) (r o n)))
(adjetivo ( ( m a ) *( d u ) ( r a s )))
(verbo ( ( m a n ) * ( d a ) (r o n)))
(verbo ( ( m a ) ( n e ) *( j a ) (r o n)))
(verbo ( ( m a ) ( n i ) ( p u ) *( l a ) (r o n)))
(sustantivo ( *( m a ) ( n o s)))
(verbo ( ( m a ) *( t a) (r o n)))
(verbo ( ( m a s ) ( t i ) *( c a) (r o n)))
(adjetivo ( ( m a ) ( l i ) *( c i o ) ( s a s )))
(adjetivo ( *( m a ) ( l a s )))
(adjetivo ( ( m a ) *( y o) (r e s)))
(adverbio ( *( m e ) ( n o s )))
(sustantivo ( *( m e ) ( s a s)))
(adjetivo ( ( m o ) *( d e s ) ( t a s )))
(verbo ( ( m o n ) *( t a ) (ñ a s)))
(adverbio ( *( m u ) ( c h a s )))
(adverbio ( *( m u y )))

(sustantivo ( (n a) * (r a n) (j a s) ) )
(sustantivo ( (n a) * (v a) (j a s) ) )
(verbo ( (n a) (v e) * (g a) (r o n) ) )
(verbo ( (n e) (c e) (s i) * (t a) (r o n) ) )
(verbo ( (n e) * (g a) (r o n) ) )
(verbo ( (n e) (g o) * (c i a) (r o n) ) )
(adjetivo ( * (n e) (g r a s) ) )
(sustantivo ( * (n i e) (t a s) ) )
(sustantivo ( (n e) * (b l i) (n a s) ) )
(verbo ( (n i) (v e) * (l a) (r o n) ) )
(verbo ( (n o) (q u e) * (a) (r o n) ) )
(verbo ( (n o) * (t a) (r o n) ) )
(verbo ( (n o) (t i) (f i) * (c a) (r o n) ) )
(sustantivo ( * (n o) (v i a s) ) )
(verbo ( (n u) (m e) * (r a) (r o n) ) )
(verbo ( (n u) * (t r i e) (r o n) ) )

(verbo ((o b) (j e) *(t a) (r o n)))
(verbo ((o) (b l i) *(g a) ( r o n)))
(verbo ((o b) (s e r) *(v a) (r o n)))
(sustantivo ( * (o s) (t r a s)))
(verbo ((o) ( c u l ) *(t a) (r o n)))
(adjetivo ((o) (c u) *(p a) (d a s)))
(sustantivo ((o) *(f r e n) (d a s)))
(sustantivo ( (v e r) * (d a) (d e s)))
(adjetivo ((o l) (v i) *(d a) (r o n)))
(verbo ((o) (p i) *(n a) (r o n)))
(adjetivo ((o r) (d i) *(n a) (r i a s)))
(sustantivo ((o r) (g u) * (l l o) (s a s)))
(adjetivo ((o) *(s a) (d a s)))
(adjetivo ((o s) *(c u) (r a s)))
(verbo ((o) (t o r) *(g a) (r o n)))
(sustantivo ((o ) *(v e) (j a s)))

(sustantivo ((p a l) *(m e) (r a s)))
(sustantivo ((p a) *(l o) (m a s)))
(verbo ((p a l) (p i) * (t a) (r o n)))
(preposicion ( * (p a) (r a)))
(sustantivo ((p a) *(r e) (j a s)))
(verbo ((p a r) *(t i e) (r o n)))
(verbo ((p e) (l i) *(g r a) (r o n)))
(adjetivo ((p e) *(q u e) (ñ a s)))
(sustantivo ((p e) (s a) *(d i) (l l a  s)))
(verbo ((p i n) *(t a) (r o n)))
(sustantivo (*(p l a) (y a s)))
(sustantivo (*(p l u) (m a s)))
(adjetivo ((p o) (d e) * (r o) (s a s)))
(preposicion ( * (p o r)))
(adjetivo ((p r e) *(c i o) (s a s)))
(verbo ((p r e) (d i) * (c a) (r o n)))
(verbo ((p r e) (f i) * (r i e) (r o n)))
(adjetivo ((p r i) *(m e) (r a s)))
(sustantivo ((p r o) (f e) *(c i a s)))
(sustantivo ((p u) *(r e) (z a s)))

(adjetivo ((q u e) * (b r a) (d a s)))
(verbo ((q u e) * (b r a) (r o n)))
(sustantivo ((q u e) (b r a n) * (t a) (r o n)))
(verbo ((q u e) * (m a) (r o n)))
(sustantivo ( * (q u e) (j a s)))
(sustantivo ((q u e) (r u) *(b i) (n e s)))
(adjetivo  (*(q u i e) (t a s)))
(sustantivo ((q u i) * (m e) (r a s)))
(sustantivo ((q u i n) (c e) (a) * (ñ e) (r a s)))
(verbo ((q u i) * (t a) (r o n)))
(verbo ((q u i) * (s i e) (r o n) ))

(sustantivo ( *(r a) (n a s)))
(advervio ( *(r a) (p i) (d a) (m e n) (t e)))
(sustantivo ( *(r a) (t a s)))
(sustantivo (*(r a) (y a s)))
(verbo ((r e) (c i) *(c l a) (b a n)))
(advervio ((r e) *(c i e n)))
(verbo ((r e) (d u) *(c i e) (r o n)))
(verbo ( * (r i e) (r o n)))
(verbo ((r e) (l l e) *(n a) (r o n)))
(sustantivo ((r e) (m o) *(l a) (c h a s)))
(verbo ((r e) (p r o) (d u) *(j e) (r o n)))
(verbo ((r e) (s o l) *(v i e) (r o n)))
(verbo ((r e s) (p i) *(r a) (r o n)))
(verbo ((r e) (t r a) *(s a) (r o n)))
(verbo ((r e) (v e) *(l a) (r o n)))
(adjetivo ((r o) *(m a n ) (t i) (c a s)))
(adjetivo ( *(r u) (b i a s)))
(sustantivo ( *(r u e) (d a s)))

(verbo ((s u) * (p i e) (r o n)))
(adjetivo ( * (s a) (b i a s)))
(verbo ((s a) (c u) * (d i e) (r o n)))
(sustantivo ( * (s a) (l i) (v a s)))
(verbo ((s a) (l u) * (d a) (r o n)))
(adjetivo ((s a) (t u) * (r a) (d a s)))
(sustantivo ( * (s e) (d a s)))
(preposicion ((s e) * (g u n)))
(adjetivo ((s e n) * (s u a) (l e s)))
(verbo ((s i l) * (b a) (r o n)))
(preposicion ( * (s i n)))
(sustantivo ((s i s) * (t e) (m a s)))
(preposicion ( * (s o)))
(adjetivo ((s o) * (b e r) (b i a s)))
(preposicion ( * (s o) (b r e)))
(adjetivo ((s u) (p e) * (r i o) (r a s)))
(verbo ((s u) (p u) * (s i e) (r o n)))
(verbo ((s u s) (t i) (t u ) *(y e) (r o n)))
(sustantivo ((s u s) (t i) * (t u) (t a s)))

(adjetivo ( (t i) *(t a) (n i) (c a s) ) )
(verbo ( (t o r) *(c i e) (r o n) ) )
(verbo ( (t e) (c l e) *(a) (r o n) ) )
(sustantivo ((t e) * (s i) (n a s)))
(adjetivo ( *(t o) (x i) (c a s) ) )
(adjetivo ( (t e) (n e) *(b r o) (s a s) ) )
(adjetivo ( (t r a) *(b a) (d a s) ) )
(adjetivo ( *(t o n) (t a s) ) )
(verbo ( (t r a) (b a) *(j a) (r o n) ) )
(verbo ( (t r a) *(g a) (r o n) ) )
(preposicion ( * (t r a s)))
(verbo ( (t a) (b u) *(l a) (r o n) ) )
(verbo ( (t a) (l a) *(d r a) (r o n) ) )
(sustantivo ( *(t r i s) (t e) (z a s) ) )
(sustantivo ( (t e m) (p e) (r a) *(t u) (r a s) ) )
(verbo ( (t r e) *(p a) (r o n) ) )
(adjetivo ( (t r a n s) (p a) *(r e n) (t e s) ) )
(verbo ( (t o r) (t u) *(r a) (r o n) ) )
(adjetivo ( (t r a n) *(q u i) (l a s) ) )

(verbo ((u) (b i) * (c a) (r o n)))
(sustantivo ( * (u l) (c e) (r a s)))
(verbo ((u l) (t r a) * (j a) (r o n)))
(adverbio (*(u l) (t i) (m a s)))
(adjetivo ((u m) * (b r o) (s a s)))
(verbo ((u) (n i) * (f i) (c a) (r o n)))
(verbo ((u) (n i) (f o r) * (m a) (r o n)))
(adverbio ((u) (n i) (f o r) (m e) * (m e n) (t e)))
(verbo ((u) * (n i e) (r o n)))
(verbo ((u) (s u r) * (p a) (r o n)))
(verbo ((u) (t i) (l i) * (z a) (r o n)))
(sustantivo ( * (u) (v a s)))

(verbo ( (v a) (g a) (b u n) (d e) * (a) (r o n)))
(adjetivo ( * (v a) (g a s)))
(sustantivo ( (v a) * (s a) (l l a s)))
(adjetivo ( * (v a s) (t a s)))
(sustantivo ( (v e) * (c i) (n a s)))
(adjetivo ( (v e) * (g a) (n a s)))
(verbo ( (v e) (g e) * (t a) (r o n)))
(verbo ( (v e n) * (d i e) (r o n)))
(adjetivo ( (v e) (n e) * (n o) (s a s)))
(verbo ( (v e n) (t i) * (l a) (r o n)))
(adjetivo ( (v e r) (g o n) * (z o) (s a s)))
(preposicion ( * (v e r) (s u s)))
(verbo ( (v i s) * (t i e) (r o n)))
(preposicion ( * (v i) (a s)))
(sustantivo ( (v i) * (c a) (r i a s)))
(adjetivo ( (v i) * (c i o) (s a s)))
(sustantivo ( (v i c) * (t o) (r i o) (s a s)))
(verbo ( (v i) (g i) * (l a) (r o n)))
(sustantivo ( * (v i) (l l a s)))
(sustantivo ( (v i) * (l l a) (n a s)))
(adjetivo ( * (v i) (l e s)))
(adjetivo ( (v i o) * (l e n) (t a s)))	
(sustantivo ( * (v i s) (c e) (r a s)))
(adverbio ( (v i) (s i) (b l e) * (m e n) (t e)))
(sustantivo ( (v i) * (s i) (t a s)))
(adjetivo ( (v i s) * (t o) (s a s)))
(adjetivo ( (v o) (l u) (m i) * (n o) (s a s)))
)
)

(define (filtroAsonante lista) 
	(cond 
		((null? lista) '())
		(#t  (cons(getAsonantePalabra(car lista))(filtroAsonante (cdr lista))))
	)
)

(define (filtroConsonante lista) 
	(cond 
		((null? lista) '())
		(#t  (cons(getConsonantePalabra(car lista))(filtroConsonante (cdr lista))))
	)
)

(define (filtroRima lista rima) 
	(cond 
		((null? lista) '())
		((or (equal? (getConsonantePalabra(car lista)) rima) (equal? (getAsonantePalabra(car lista)) rima) )  (cons(car lista)(filtroRima (cdr lista) rima)))
		(#t (filtroRima (cdr lista) rima))
	)
)

(define (filtro lista tipo) 
	(cond 
		((null? lista) '())
		((equal? (car(car lista)) tipo)  (cons(car lista)(filtro (cdr lista) tipo)))
		(#t (filtro (cdr lista) tipo))
	)
)

(define (len lista) 
	(cond
		((null? lista) -1)
		(#t (+ 1 (len (cdr lista))))
	)
)


(define (nthpos lista pos)
	(cond 
		((null? lista) '())
		((eq? pos 0) (car lista))
		(#t (nthpos (cdr lista) (+ pos -1)))
	)
)

(define (crdth lista pos)
	(cond
		((null? lista) '())
		((eq? pos 0) (cons (car lista) (cdr lista)) )
		(#t ( crdth (cdr lista) (+ pos -1)))
	)
)



(define (randomAdjetivo lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'adjetivo') (nthpos lista pos))
		(#t (randomAdjetivo lista (random (+(len lista)1))))

	) 
)


(define (randomSustantivo lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'sustantivo') (nthpos lista pos))
		(#t (randomSustantivo lista (random (+(len lista)1))))

	) 
)

(define (randomVerbo lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'verbo') (nthpos lista pos))
		(#t (randomVerbo lista (random (+(len lista)1))))

	) 
)

(define (randomAdverbio lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'adverbio') (nthpos lista pos))
		(#t (randomAdverbio lista (random (+(len lista)1))))

	) 
)

(define (randomAdverbioMente lista pos) 
	(cond
		((and (equal? (nthpos (nthpos lista pos) 0) 'adverbio') (equal? (car(lastL(nthpos (nthpos lista pos) 1))) '(t e))) (nthpos lista pos) )
		(#t (randomAdverbioMente lista (random (+(len lista)1))))

	) 
)


(define (randomArticulo lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'articulo') (nthpos lista pos))
		(#t (randomArticulo lista (random (+(len lista)1))))

	) 
)

(define (randomPreposicion lista pos) 
	(cond
		((equal? (nthpos (nthpos lista pos) 0) 'preposicion') (nthpos lista pos))
		(#t (randomPreposicion lista (random (+(len lista)1))))

	) 
)

(define (getAccentPos lista)
	(cond 
		((equal? (car lista) '*') 0)
		(#t (+ 1 (getAccentPos (cdr lista))))
	)
)

(define (getProsodicAccent palabra) 
	(cond
		(#t (flat (crdth (nthpos palabra 1) (+ (getAccentPos (nthpos palabra 1))1))))
	)
)

(define (getProsodicAccent2 palabra) 
	(cond
		(#t  (flat  (crdth palabra  (+ (getAccentPos palabra) 1))))
	)
)

(define (getConsonante palabra)
	(cond 
		((null? palabra) '())
		((eq? (car palabra) 'a') (cons (car palabra)(cdr palabra)))
		((eq? (car palabra) 'e') (cons (car palabra)(cdr palabra)))
		((eq? (car palabra) 'i') (cons (car palabra)(cdr palabra)))
		((eq? (car palabra) 'o') (cons (car palabra)(cdr palabra)))
		((eq? (car palabra) 'u') (cons (car palabra)(cdr palabra)))
		(#t (getConsonante (cdr palabra)))
	)
)

(define (getAsonante palabra)
	(cond 
		((null? palabra) '())
		((eq? (car palabra) 'a') (append (cons(car palabra)'())(getAsonante(cdr palabra))))
		((eq? (car palabra) 'e') (append (cons(car palabra)'())(getAsonante(cdr palabra))))
		((eq? (car palabra) 'i') (append (cons(car palabra)'())(getAsonante(cdr palabra))))
		((eq? (car palabra) 'o') (append (cons(car palabra)'())(getAsonante(cdr palabra))))
		((eq? (car palabra) 'u') (append (cons(car palabra)'())(getAsonante(cdr palabra))))
		(#t (getAsonante (cdr palabra)))
	)
)

(define (getConsonantePalabra palabra)
	(cond
		(#t (getConsonante(getProsodicAccent2(flat(nthpos palabra 1)))))
	)
)

(define (getAsonantePalabra palabra)
	(cond
		(#t (getAsonante(getProsodicAccent2(flat(nthpos palabra 1)))))
	)
)

(define (getAcentoVerso verso) 
	(cond
		((<= (random 100) 50) (getConsonante(getProsodicAccent2 (car(lastL verso)))))
		(#t (getAsonante(getProsodicAccent2 (car(lastL verso)))))
	)
)

(define (getAcentoConsonanteVerso verso) 
	(cond
		(#t (getConsonante(getProsodicAccent2 (car(lastL verso)))))
	)
)

(define (getAcentoAsonanteVerso verso) 
	(cond
		(#t (getAsonante(getProsodicAccent2 (car(lastL verso)))))
	)
)


(define (imprimirVerso verso)
	(cond 
		((or (null? verso) (null? (cdr verso))) (nthpos verso 1))
		(#t  (cons(nthpos verso 1) (imprimirVerso(cdr (cdr verso) ))))
	)
)

(define (imprimirVersoMejorado verso)
	(cond 
		(#t  (findAndKillAllDeep (imprimirVerso  verso) '* ))
	)
)

(define (contarSilabasVerso verso)
	(cond 
		((null? verso) 0)
		(#t (+ (len (car verso)) (contarSilabasVerso (cdr verso))))

	)
)

(define (validarVerso verso)
	(cond 
		((and (>= (contarSilabasVerso(imprimirVersoMejor verso))8)(<= (contarSilabasVerso(imprimirVersoMejor verso))20)) #t)
		(#t #f)
	)
)

(define (crearVersoEstructura posibilidad)
	(cond 
		((and (>= posibilidad 0) (<= posibilidad 3)) (estructuraGramatical1 x) )
		((and (> posibilidad 3) (<= posibilidad 6)) (estructuraGramatical2 x) )
		((and (> posibilidad 6) (<= posibilidad 9)) (estructuraGramatical3 x) )
		((and (> posibilidad 9) (<= posibilidad 12)) (estructuraGramatical4 x) )
		((and (> posibilidad 12) (<= posibilidad 15)) (estructuraGramatical5 x) )
		((and (> posibilidad 15) (<= posibilidad 18)) (estructuraGramatical6 x) )
		((and (> posibilidad 18) (<= posibilidad 21)) (estructuraGramatical7 x) )
		((and (> posibilidad 21) (<= posibilidad 24)) (estructuraGramatical8 x) )
		((and (> posibilidad 24) (<= posibilidad 27)) (estructuraGramatical9 x) )
		((and (> posibilidad 27) (<= posibilidad 30)) (estructuraGramatical10 x) )
		((and (> posibilidad 30) (<= posibilidad 33)) (estructuraGramatical11 x) )
		((and (> posibilidad 33) (<= posibilidad 36)) (estructuraGramatical12 x) )
		((and (> posibilidad 36) (<= posibilidad 39)) (estructuraGramatical13 x) )
		((and (> posibilidad 39) (<= posibilidad 42)) (estructuraGramatical14 x) )
		((and (> posibilidad 42) (<= posibilidad 45)) (estructuraGramatical15 x) )
		((and (> posibilidad 45) (<= posibilidad 48)) (estructuraGramatical16 x) )
		((and (> posibilidad 48) (<= posibilidad 51)) (estructuraGramatical17 x) )
		((and (> posibilidad 51) (<= posibilidad 54)) (estructuraGramatical18 x) )
		((and (> posibilidad 54) (<= posibilidad 57)) (estructuraGramatical19 x) )
		((and (> posibilidad 57) (<= posibilidad 60)) (estructuraGramatical20 x) )
		((and (> posibilidad 60) (<= posibilidad 63)) (estructuraGramatical21 x) )
		((and (> posibilidad 63) (<= posibilidad 66)) (estructuraGramatical22 x) )
		((and (> posibilidad 66) (<= posibilidad 69)) (estructuraGramatical23 x) )
		((and (> posibilidad 69) (<= posibilidad 72)) (estructuraGramatical24 x) )
		((and (> posibilidad 72) (<= posibilidad 75)) (estructuraGramatical25 x) )
		((and (> posibilidad 75) (<= posibilidad 78)) (estructuraGramatical26 x) )
		((and (> posibilidad 78) (<= posibilidad 81)) (estructuraGramatical27 x) )
		((and (> posibilidad 81) (<= posibilidad 84)) (estructuraGramatical28 x) )
		((and (> posibilidad 84) (<= posibilidad 87)) (estructuraGramatical29 x) )
		((and (> posibilidad 87) (<= posibilidad 90)) (estructuraGramatical30 x) )
		((and (> posibilidad 90) (<= posibilidad 93)) (estructuraGramatical31 x) )
		((and (> posibilidad 93) (<= posibilidad 96)) (estructuraGramatical32 x) )
		((and (> posibilidad 96) (<= posibilidad 99)) (estructuraGramatical33 x))
		((and (> posibilidad 99) (<= posibilidad 102)) (estructuraGramatical34 x))
		(#t (crearVersoEstructura (random 102)))
	)
)


(define (crearVersoEstructuraConRima posibilidad rima)
	(cond 
	((and (>= posibilidad 0) (<= posibilidad 3) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical1 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 3) (<= posibilidad 6) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical2 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 6) (<= posibilidad 9) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical3 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 9) (<= posibilidad 12) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical4 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 12) (<= posibilidad 15) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical5 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 15) (<= posibilidad 18) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical6 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 18) (<= posibilidad 21) (not(null? (filtroRima (filtro x 'verbo)rima)))) (estructuraGramatical7 (filtroRima (filtro x 'verbo)rima)))
	((and (> posibilidad 21) (<= posibilidad 24) (not(null? (filtroRima (filtroRima (filtro x 'adverbio)rima)'(e n t e))))) (estructuraGramatical8 (filtroRima (filtro x 'adverbio)rima)))
	((and (> posibilidad 24) (<= posibilidad 27) (not(null? (filtroRima (filtro x 'verbo)rima)))) (estructuraGramatical9 (filtroRima (filtro x 'verbo)rima)))
	((and (> posibilidad 27) (<= posibilidad 30) (not(null? (filtroRima (filtroRima (filtro x 'adverbio)rima)'(e n t e))))) (estructuraGramatical10 (filtroRima (filtro x 'adverbio)rima)))
	((and (> posibilidad 30) (<= posibilidad 33) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical11 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 33) (<= posibilidad 36) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical12 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 36) (<= posibilidad 39) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical13 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 39) (<= posibilidad 42) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical14 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 42) (<= posibilidad 45) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical15 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 45) (<= posibilidad 48) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical16 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 48) (<= posibilidad 51) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical17 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 51) (<= posibilidad 54) (not(null? (filtroRima (filtro x 'verbo)rima)))) (estructuraGramatical18 (filtroRima (filtro x 'verbo)rima)))
	((and (> posibilidad 54) (<= posibilidad 57) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical19 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 57) (<= posibilidad 60) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical20 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 60) (<= posibilidad 63) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical21 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 63) (<= posibilidad 66) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical22 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 66) (<= posibilidad 69) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical23 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 69) (<= posibilidad 72) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical24 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 72) (<= posibilidad 75) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical25 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 75) (<= posibilidad 78) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical26 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 78) (<= posibilidad 81) (not(null? (filtroRima (filtro x 'verbo)rima)))) (estructuraGramatical27 (filtroRima (filtro x 'verbo)rima)))
	((and (> posibilidad 81) (<= posibilidad 84) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical28 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 84) (<= posibilidad 87) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical29 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 87) (<= posibilidad 90) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical30 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 90) (<= posibilidad 93) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical31 (filtroRima (filtro x 'sustantivo)rima)))
	((and (> posibilidad 93) (<= posibilidad 96) (not(null? (filtroRima (filtroRima (filtro x 'adverbio)rima)'(e n t e))))) (estructuraGramatical32 (filtroRima (filtro x 'adverbio)rima)))
	((and (> posibilidad 96) (<= posibilidad 99) (not(null? (filtroRima (filtro x 'adjetivo)rima)))) (estructuraGramatical33 (filtroRima (filtro x 'adjetivo)rima)))
	((and (> posibilidad 99) (<= posibilidad 102) (not(null? (filtroRima (filtro x 'sustantivo)rima)))) (estructuraGramatical34 (filtroRima (filtro x 'sustantivo)rima)))
	(#t (crearVersoEstructuraConRima (random 102) rima))
	)
)

(define (createVerso) 
	(cond 
		(#t (crearVerso (crearVersoAux)))
	)
)

(define (crearVersoAux) 
	(cond 
		(#t (crearVersoEstructura (random 102)) )
	)
)

(define (crearVerso verso) 
	(cond 
		((eq? (validarVerso verso) #t) verso)
		(#t (crearVerso(crearVersoAux)))
	)
)

(define (createVersoConRima rima) 
	(cond 
		(#t (crearVersoConRima (crearVersoConRimaAux rima) rima))
	)
)

(define (crearVersoConRimaAux rima) 
	(cond 
		(#t (crearVersoEstructuraConRima (random 102) rima) )
	)
)

(define (crearVersoConRima verso rima) 
	(cond 
		((eq? (validarVerso verso) #t) verso)
		(#t (crearVersoConRima(crearVersoConRimaAux rima) rima))
	)
)

(define (getAcento verso)
	(cond 
		((> (random 100) 50) (getAsonante(lastL verso)))
		(#t (getConsonante(lastL verso)))
	)
)

(define (getAcentoAsonante verso)
	(cond 
		(#t (getAsonante(lastL verso)))
	)
)

(define (getAcentoConsonante verso)
	(cond 
		(#t (getConsonante(lastL verso)))
	)
)

; Las estrellas brillantes giraron con las lunas azules.

(define (estructuraGramatical1 lista)
	(cond 
		(#t (print 1)  (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

; Las estrellas fugaces brillaron increiblemente con las estrellas desoladas.

(define (estructuraGramatical2 lista)
	(cond 
		(#t (print 2) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

; Las estrellas fueron con las luciernagas azules.

(define (estructuraGramatical3 lista)
	(cond 
		(#t (print 3) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1)))
			(randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

; Las estrellas caminaron ferozmente entre las estructuras viejas.

(define (estructuraGramatical4 lista)
	(cond 
		(#t (print 4) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1)))
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			 (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)



(define (estructuraGramatical5 lista)
	(cond 
		(#t (print 5) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  (randomSustantivo lista (random(+ (len lista) 1 ))) 
			))
	)
)

(define (estructuraGramatical6 lista)
	(cond 
		(#t (print 6) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo lista (random(+ (len lista) 1 ))) 
			))
	)
)

(define (estructuraGramatical7 lista)
	(cond 
		(#t (print 7) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical8 lista)
	(cond 
		(#t (print 8) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical9 lista)
	(cond 
		(#t (print 9) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1)))
			(randomVerbo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical10 lista)
	(cond 
		(#t (print 10) (append (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1)))
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical11 lista)
	(cond 
		(#t (print 11) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random (len x))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical12 lista)
	(cond 
		(#t (print 12) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random (len x))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical13 lista)
	(cond 
		(#t (print 13) (append (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random (len x))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))	
	)
)

(define (estructuraGramatical14 lista)
	(cond 
		(#t (print 14) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical15 lista)
	(cond 
		(#t (print 15) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random (len x))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical16 lista)
	(cond 
		(#t (print 16) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1)))  (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical17 lista)
	(cond 
		(#t (print 17) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random (+(len lista)1)))))
	)
)

(define (estructuraGramatical18 lista)
	(cond  
		(#t (print 18) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			 (randomVerbo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical19 lista)
	(cond 
		(#t (print 19) (append (randomAdverbioMente x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			 (randomAdjetivo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical20 lista)
	(cond 
		(#t (print 20) (append (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random (+(len lista)1))) ))
	)
)

(define (estructuraGramatical21 lista)
	(cond 
		(#t (print 21) (append (randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random (+(len lista)1))) ))
	)
)

(define (estructuraGramatical22 lista)
	(cond 
		(#t (print 22) (append (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical23 lista)
	(cond 
		(#t (print 23) (append (randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo lista (random(+ (len lista) 1 ))) ))
	)
)

(define (estructuraGramatical24 lista)
	(cond 
		(#t (print 24) (append (randomAdverbio x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) 
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo x (random (len x))) (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1)))  
			(randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

; Sobre las danzas ignorantes obeservaron por hallaron juvenilmente
; Sobre las danzas ignorantes, 

(define (estructuraGramatical25 lista)
	(cond  
		(#t (print 25) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) 
			(randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical26 lista)
	(cond 
		(#t (print 26) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1)))  (randomArticulo x (random(+ (len x) 1))) 
			 (randomSustantivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical27 lista)
	(cond 
		(#t (print 27) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo lista (random(+ (len lista) 1 )))   ))
	)
)

(define (estructuraGramatical28 lista)
	(cond 
		(#t (print 28) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) 
			(randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical29 lista)
	(cond 
		(#t (print 29) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			 (randomVerbo x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1)))  (randomArticulo x (random(+ (len x) 1))) 
			 (randomSustantivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical30 lista)
	(cond  
		(#t (print 30) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1)))
			 (randomPreposicion x (random(+ (len x) 1))) 
			(randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical31 lista)
	(cond 
		(#t (print 31) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1)))
			 (randomPreposicion x (random(+ (len x) 1)))  (randomArticulo x (random(+ (len x) 1)))  (randomSustantivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical32 lista)
	(cond 
		(#t (print 32) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomAdjetivo x (random(+ (len x) 1))) (randomVerbo lista (random(+ (len lista) 1 ))) (randomAdverbioMente lista (random(+ (len lista) 1)))   ))
	)
)

(define (estructuraGramatical33 lista)
	(cond 
		(#t (print 33) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			(randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1))) 
			(randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) (randomAdjetivo lista (random(+ (len lista) 1 )))))
	)
)

(define (estructuraGramatical34 lista)
	(cond 
		(#t (print 34) (append (randomPreposicion x (random(+ (len x) 1))) (randomArticulo x (random(+ (len x) 1))) (randomSustantivo x (random(+ (len x) 1))) 
			 (randomVerbo x (random(+ (len x) 1))) (randomAdverbioMente x (random(+ (len x) 1))) (randomPreposicion x (random(+ (len x) 1)))  
			 (randomArticulo x (random(+ (len x) 1))) (randomSustantivo lista (random(+ (len lista) 1 )))))
	)
)

(define (verificarRimas potencialVerso verso tipoRima)
	(cond 
		((and (<= tipoRima 50) (equal? (getAcentoAsonanteVerso potencialVerso) (getAcentoAsonanteVerso verso)))  #t )
		((and (> tipoRima 50) (equal? (getAcentoConsonanteVerso potencialVerso) (getAcentoConsonanteVerso verso)))  #t )
		(#t #f)
	)
)

; Basado en el valor de tipoRima, se verifica la existencia de rimas para un determinado verso.
(define (verificarExistenciaRimas verso tipoRima)
	(cond 
		((<= tipoRima 50) (verificarExistenciaRimasAsonante verso tipoRima))
		((> tipoRima 50) (verificarExistenciaRimasConsonante verso tipoRima))
	)
)

(define (verificarExistenciaRimasAsonante verso tipoRima)
	(cond 
		((null? (filtroRima x (getAcentoAsonanteVerso verso))) (print "No hay Rimas"))
		(#t (createVersoConRima (getAcentoAsonanteVerso verso)))
	)
)

(define (verificarExistenciaRimasConsonante verso tipoRima)
	(cond 
		((null? (filtroRima x (getAcentoConsonanteVerso verso))) (print "No hay Rimas"))
		(#t (createVersoConRima (getAcentoConsonanteVerso verso)))
	)
)

(define (crearRima verso tipoRima)
	(cond
		( (and (>= tipoRima 0) (<= tipoRima 100))(verificarExistenciaRimas verso tipoRima)) 
		(#t (crearRima verso (random 100)))
	)
)

(define (crearRimaAux potencialVerso verso tipoRima	)
	(cond
		((verificarRimas potencialVerso verso tipoRima) potencialVerso)
		(#t (crearRima verso tipoRima))
	)
)


(define (crearPoema randomNum)
	(cond 
		(#t (crearPoemaAux (createVerso) (createVerso) (createVerso) (createVerso) randomNum ))
	)
)

(define (crearPoemaAux verso1 verso2 verso7 verso8 randomNum)
	(cond 
		(#t 
			(append verso1 verso2 (crearRima verso1 (random 50)) (crearRima verso2 (+ 50 (random 50))) (crearRima verso1 (random 50)) (crearRima verso2 (+ 50 (random 50)))
			verso7 verso8 (crearRima verso1 (random 100)) (crearRima verso1 (random 100)))
		) 
	)
)

(define (Poeta2 randomNum) 
	(cond 
		(#t (map print(findAndKillAllDeep(imprimirVerso(crearPoema randomNum))'*')))
	)
)

; La funcion Poeta, es la encargada del arranque del programa. 
; Requiere de un numero cualquier para desencadenar la creación de versos.
; Llama a CrearPoema2, el cual tal y como menciona el nombre. Genera los poemas.
; Además se usa el algoritmo FindAndKillAllDeep visto en clase, para eliminar los acentos de los poémas.
(define (Poeta randomNum) 
	(cond 
		(#t (concListVerso(imprimirPoema(findAndKillAllDeep(crearPoema2 randomNum)'*'))))	
	)
)

; Imprimir poema, recibe como parámetro un poema completo. 
; El cual, mediante el mapeo de funciones; usa a imprimirParrafo para ser mostrada en pantalla.
(define (imprimirPoema poema)
	(cond 
		(#t (map imprimirParrafo poema))
	)
)

; imprimirParrafo, recibe como parámetro un parrafo, y utiliza un mapeo de la funcion imprimirVerso2, en cada verso del parrafo.
(define (imprimirParrafo parrafo)
	(cond 
		(#t (print) (print) (map imprimirVerso2 parrafo))
	)
)

; CrearPoema2, es la función encargada de la creación de los versos base para el poema.
(define (crearPoema2 randomNum)
	(cond 
		(#t (crearPoemaAux2 (createVerso) (createVerso) (createVerso) (createVerso) randomNum ))
	)
)

; La función auxiliar de crearPoema, sirve para organizar y estructurar correctamente los versos del poema. 
; Además de que llama a las funciones crearRima, las cuales utilizan las rimas de los versos bases, para crear versos que rimen con estos.
(define (crearPoemaAux2 verso1 verso2 verso7 verso8 randomNum)
	(cond 
		(#t 
			(append (cons (append (cons verso1 '()) (cons verso2 '()) (cons (crearRima verso1 (random 50))'()))'()) 
	(cons (append (cons (crearRima verso2 (+ 50 (random 50)))'()) (cons(crearRima verso1 (random 50))'()) (cons (crearRima verso2 (+ 50 (random 50)))'()))'())
					(cons (append (cons verso7 '()) (cons verso8 '()) (cons (crearRima verso7 (random 100))'()) (cons (crearRima verso8 (random 100))'()) )'()))
		) 
	)
)

; concList (concateList), se encarga de concatenar los valores dentro de una lista, para facilitar la lectura de los poemas.
(define (concList lista) 
	(cond
		((null? (cdr lista)) (car lista))
		(#t (conc (car lista) (concList (cdr lista))))
	)
)


; La funcion concListVerso, es la base fundamental de la impresión de los poemas.
; Mediante el uso del mapeo de concateList a cada verso, y la conversión de este mapeo a strings. Se permite mostrar los poemas como symbols.
(define (concListVerso lista)
	(cond 
		((null? lista) (print))
		((not(null? (cdr(cdr(cdr(car lista)))))) 
(print)(print) 	(print(substring(->string(map concList (car(car lista))))1 (+(string-length(->string(map concList (car(car lista)))))-1)))
(print) 		(print(substring(->string(map concList (car(cdr(car lista)))))1 (+(string-length(->string(map concList (car(cdr(car lista))))))-1)))
(print)			(print(substring(->string(map concList (car(cdr(cdr(car lista))))))1 (+(string-length(->string(map concList (car(cdr(cdr(car lista)))))))-1)))
(print)			(print(substring(->string(map concList (car(cdr(cdr(cdr(car lista)))))))1 (+(string-length(->string(map concList (car(cdr(cdr(cdr(car lista))))))))-1)))
														(concListVerso (cdr lista)))

		(#t 
(print)(print) 	(print(substring(->string(map concList (car(car lista))))1 (+(string-length(->string(map concList (car(car lista)))))-1))) 
(print) 		(print(substring(->string(map concList (car(cdr(car lista)))))1 (+(string-length(->string(map concList (car(cdr(car lista))))))-1))) 
(print) 		(print(substring(->string(map concList (car(cdr(cdr(car lista))))))1 (+(string-length(->string(map concList (car(cdr(cdr(car lista)))))))-1))) 
														(concListVerso (cdr lista)))
	)
)


(define (imprimirVerso2 lista) 
	(cond 
		((null? lista) '())
		(#t  (cons(map concList(car(cdr lista))) (imprimirVerso2(cdr ( cdr lista))) ))
	)
)

(define (imprimirVersoMejor lista) 
	(cond 
		((null? lista) '())
		(#t  (cons(car(cdr lista)) (imprimirVersoMejor(cdr ( cdr lista))) ))
	)
)


